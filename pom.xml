<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd ">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.epam</groupId>
    <artifactId>ships</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>client</module>
        <module>server</module>
        <module>shared</module>
    </modules>

    <properties>
        <!--Encoding-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.targetEncoding>UTF-8</project.build.targetEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--Code Static Analysis-->
        <findbugsVersion>3.0.5</findbugsVersion>
        <checkstyleVersion>2.17</checkstyleVersion>
        <jacocoVersion>0.7.9</jacocoVersion>
        <!--Testing-->
        <testngVersion>6.13.1</testngVersion>
        <mockitoVersion>2.13.0</mockitoVersion>
        <!--Logging-->
        <!--The newest version 2.10.0 gives a warning such as
        [WARNING] Unable to process class module-info.class in JarAnalyzer File
        /home/sandor/.m2/repository/org/apache/logging/log4j/log4j-api/2.10.0/log4j-api-2.10.0.jar
        org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19
        Therefore an older version is preferred.-->
        <log4jVersion>2.9.1</log4jVersion>
        <!--Maven-->
        <surefireVersion>2.20.1</surefireVersion>
        <shadeVersion>3.1.0</shadeVersion>
        <!--The newest version is M1, therefore an older
        version of Enforcer Plugin was chosen.-->
        <enforcerVersion>1.4.1</enforcerVersion>
        <mavenVersions>2.5</mavenVersions>
        <projectInfoVersion>2.9</projectInfoVersion>
        <dependency.locations.enabled>false</dependency.locations.enabled>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <mavenVersion>3.5.2</mavenVersion>
        <compilerVersion>3.7.0</compilerVersion>
        <cleanVersion>3.0.0</cleanVersion>
        <deployVersion>2.8.2</deployVersion>
        <installVersion>2.5.2</installVersion>
        <siteVersion>3.6</siteVersion>
        <resourceVersion>3.0.2</resourceVersion>
        <releaseVersion>2.5.3</releaseVersion>
        <antrunVersion>1.8</antrunVersion>
        <assemblyVersion>3.1.0</assemblyVersion>
        <dependencyVersion>3.0.2</dependencyVersion>
        <jxrVersion>2.5</jxrVersion>
        <!-- The newest released javadoc plugin version is 3.0.0,
        however an older version is preferred since the newest
        version throws an error complaining about a missing
        module descriptor and there no info available online which
        could help to solve this issue.
        -->
        <jdocVersion>2.10.4</jdocVersion>
        <jdepsVersion>0.4.0</jdepsVersion>
        <!--switch to true if not willing to generate a site-->
        <skipSite>false</skipSite>
        <!--Utils-->
        <commonsLang3Version>3.7</commonsLang3Version>
        <orgJsonVersion>20171018</orgJsonVersion>
        <commonsIoVersion>2.5</commonsIoVersion>
        <lombokVersion>1.16.18</lombokVersion>
        <gsonVersion>2.8.2</gsonVersion>
        <sonarSourceVersion>3.4.0.905</sonarSourceVersion>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--Communication, Serialization, Fleet-->
            <dependency>
                <groupId>com.epam.ships</groupId>
                <artifactId>shared</artifactId>
                <version>${project.version}</version>
            </dependency>
            <!--Testing-->
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>${testngVersion}</version>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockitoVersion}</version>
            </dependency>
            <!--Else-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commonsLang3Version}</version>
            </dependency>
            <!--JSON-->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gsonVersion}</version>
            </dependency>
            <!--Logging-->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4jVersion}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4jVersion}</version>
            </dependency>
            <!--Lombok-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombokVersion}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${enforcerVersion}</version>
                    <executions>
                        <execution>
                            <id>enforce-maven</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <rules>
                            <requireMavenVersion>
                                <version>${mavenVersion}</version>
                            </requireMavenVersion>
                            <requireJavaVersion>
                                <version>${maven.compiler.source}</version>
                            </requireJavaVersion>
                            <dependencyConvergence>
                                <uniqueVersions>true</uniqueVersions>
                            </dependencyConvergence>
                        </rules>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${compilerVersion}</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${cleanVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${deployVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${installVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefireVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${siteVersion}</version>
                    <configuration>
                        <skip>${skipSite}</skip>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resourceVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${releaseVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${antrunVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${assemblyVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${dependencyVersion}</version>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacocoVersion}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${sonarSourceVersion}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


    <reporting>
        <plugins>
            <!--Visible only in child module reports-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${findbugsVersion}</version>
                <configuration>
                    <xmlOutput>false</xmlOutput>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${mavenVersions}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${projectInfoVersion}</version>
                <configuration>
                    <dependencyLocationsEnabled>${dependency.locations.enabled}</dependencyLocationsEnabled>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                            <report>index</report>
                            <report>dependencies</report>
                            <report>project-team</report>
                            <report>cim</report>
                            <report>issue-tracking</report>
                            <report>mailing-list</report>
                            <report>license</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacocoVersion}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report-aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${jxrVersion}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${checkstyleVersion}</version>
                <configuration>
                    <configLocation>google_checks.xml</configLocation>
                </configuration>
            </plugin>
            <!--JDepend plug-in isn't present because it throws some
            unresolvable warnings, as it seems not to be 100% compatible
            with Java 1.8, although reports produced are mostly fine.
            If it turns out to be necessary, we can include it as well.
            In general, JDepend reports summarize dependencies quite well.

            For now, we've added the newer JDeps plug-in only.
            When it comes to reporting, it simply lists dependencies.
            It also has some drawbacks:
            - jdeps-maven-plugin by Apache isn't compatible with
           reporting (only with build) so we went for the one created
           by com.github.marschall
            - we've found no option of adding external dependencies to
            classpath with this plug-in as it can be simply done in
            command line with jdeps, so occasionally we get 'not found'
            in reports
            - we receive the below warning in report produced for the shared
            module which is dependent on log4j, and we couldn't resolve it -
            there isn't much info on-line, and we would'nt upgrade to JDK9
            just because of that

            Warning: /home/sandor/.m2/repository/org/apache/logging/log4j/log4j-api/2.9.1/log4j-api-2.9.1.jar
            is a multi-release jar file All versioned entries are analyzed. To analyze the entries for a specific
            version, use a newer version of jdeps (JDK 9 or later) "- -multi-release" option.
            -->
            <plugin>
                <groupId>com.github.marschall</groupId>
                <artifactId>jdeps-maven-plugin</artifactId>
                <version>${jdepsVersion}</version>
                <configuration>
                    <!--More info on configuration:
                    http://marschall.github.io/jdeps-maven-plugin/jdeps-report-mojo.html
                    -->
                    <!--Show profile or the file containing a package.-->
                    <profile>true</profile>
                    <!--Recursively traverse all dependencies.-->
                    <recursive>true</recursive>
                    <!--Print all class level dependencies.-->
                    <verbose>true</verbose>
                    <!--Version information.-->
                    <version>true</version>
                </configuration>
                <!--The below segment disables a report generation
                 for the root module since no classes are
                 available there-->
                <reportSets>
                    <reportSet>
                        <inherited>false</inherited>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${jdocVersion}</version>
                <configuration>
                    <!--Description:
                    https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html-->
                    <quiet>true</quiet>
                    <show>public</show>
                    <linksource>true</linksource>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

    <!--Non-technical info goes below-->

    <name>Ships - ROOT</name>

    <description>
        It's a root POM:
        - it defines constants (versions mostly)
        - it has dependency and plug-in management configured
        - it has reporting configured
    </description>

    <!--Site - it makes links to sub-modules work!
    (we use mvn site && mvn site:stage to generate a site)
    -->
    <distributionManagement>
        <site>
            <id>${project.artifactId}</id>
            <url>scp:///</url>
        </site>
    </distributionManagement>

    <url>./index.html</url>
    <organization>
        <name>Java Academy</name>
    </organization>

    <developers>
        <developer>
            <name>Magdalena Aarsman</name>
            <timezone>Europe/Warsaw</timezone>
            <url>https://github.com/M-Aarsman</url>
            <email>magdalena_aarsman@epam.com</email>
            <roles>
                <role>Developer (client)</role>
            </roles>
            <properties/>
        </developer>
        <developer>
            <name>Piotr Czyż</name>
            <timezone>Europe/Warsaw</timezone>
            <url>https://github.com/sabath91</url>
            <email>piotr_czyz@epam.com</email>
            <roles>
                <role>Developer (server/scripts)</role>
            </roles>
            <properties/>
        </developer>
        <developer>
            <name>Sandor Korotkevics</name>
            <timezone>Europe/Warsaw</timezone>
            <url>https://github.com/korotkevics</url>
            <email>sandor_korotkevics@epam.com</email>
            <roles>
                <role>Developer (shared/docs/configs/scripts/pm)</role>
            </roles>
            <properties/>
        </developer>
    </developers>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/korotkevics/ships/issues</url>
    </issueManagement>

    <ciManagement>
        <system>Travis CI</system>
        <url>https://travis-ci.org/korotkevics/ships</url>
    </ciManagement>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
            <comments>Open Source Project</comments>
        </license>
    </licenses>

</project>
